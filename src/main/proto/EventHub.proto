syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.ge.predix.eventhub";
option java_outer_classname = "EventHubService";
package predix.eventhub;


// A Timestamp represents a point in time independent of any time zone
// or calendar, represented as seconds and fractions of seconds at
// nanosecond resolution in UTC Epoch time. It is encoded using the
// Proleptic Gregorian Calendar which extends the Gregorian calendar
// backwards to year one. It is encoded assuming all minutes are 60
// seconds long, i.e. leap seconds are "smeared" so that no leap second
// table is needed for interpretation. Range is from
// 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
// By restricting to that range, we ensure that we can convert to
// and from  RFC 3339 date strings.
// See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
//
// Example 1: Compute Timestamp from POSIX `time()`.
//
//     Timestamp timestamp;
//     timestamp.set_seconds(time(NULL));
//     timestamp.set_nanos(0);
//
// Example 2: Compute Timestamp from POSIX `gettimeofday()`.
//
//     struct timeval tv;
//     gettimeofday(&tv, NULL);
//
//     Timestamp timestamp;
//     timestamp.set_seconds(tv.tv_sec);
//     timestamp.set_nanos(tv.tv_usec * 1000);
//
// Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
//
//     FILETIME ft;
//     GetSystemTimeAsFileTime(&ft);
//     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
//
//     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
//     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
//     Timestamp timestamp;
//     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
//     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
//
// Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
//
//     long millis = System.currentTimeMillis();
//
//     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
//         .setNanos((int) ((millis % 1000) * 1000000)).build();
//
//
// Example 5: Compute Timestamp from current time in Python.
//
//     now = time.time()
//     seconds = int(now)
//     nanos = int((now - seconds) * 10**9)
//     timestamp = Timestamp(seconds=seconds, nanos=nanos)
//
//

message Timestamp {

  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

message Message {
  string id = 1; // Message ID - UUID
  bytes body = 2; // Payload from the Producer. there is also "Any" type, but its still under development
  string zone_id = 3;
  map<string, string> tags = 4; // Some general attributes, could potentially be used for tagging and others
  bytes key = 5;
  string topic = 6 ;
  int32 partition = 7 ;
  int64 offset    = 8 ;
  Timestamp timestamp = 9 ;
  bool isMetricMsg = 10 ;
  Metric metric = 11 ;
}

message Ack {
  string id = 1;
  AckStatus status_code = 2;
  string desc = 3;
  string topic = 4 ;  // this you will only get this the ack is a success
  int32 partition = 5 ; // this you will only get this the ack is a success
  int64 offset    = 6 ; // this you will only get this the ack is a success
  Timestamp timestamp = 7 ; // this you will only get this the ack is a success
  bytes body = 8 ; // you will only get this if the ack is a failure .
  string zone_id = 9; // you will only get this if the ack is a failure .
  map<string, string> tags = 10; // you will only get this if the ack is a failure .
  bytes key = 11; // you will only get this if the ack is a failure .
  bool isMetricMsg = 12 ;
  Metric metric = 13 ;
}

message Metric {
  map<string, string> metricmap = 1;
}


enum AckStatus {
  ACCEPTED = 0;
  BAD_REQUEST = 1;
  REQUEST_TOO_LARGE = 2;
  FAILED = 3;
}

message Messages {
  repeated Message msg = 1;
}

message PublishRequest {
  Messages messages = 1;
}

//Used for batching messages on subscribe
message SubscriptionMessage {
  Messages messages = 1;
}

message PublishResponse {
  repeated Ack ack = 1;
}

message SubscriptionResponse {
  repeated Ack ack = 1 ;
}

//Used for acking batch messages on subscribe
message SubscriptionAcks {
  repeated Ack ack = 1 ;
}

message SubscriptionRequest {
  string zone_id = 1; // zone name, this will be the user's zone
  string subscriber = 2; // subscriber name, this will be utilized to parallelize processing
  string instance_id = 3; // particular instance of the subscriber
}

// Publisher service definition
service Publisher {
  // Send message to topic. Topic name will be in URI
  rpc send (stream PublishRequest) returns (stream PublishResponse) {}
}

// Subscriber service definition
service Subscriber {
  // Receive message from a topic, as a subscriber
   rpc receive (SubscriptionRequest) returns (stream Message) {}
   rpc receiveWithAcks (stream SubscriptionResponse) returns (stream Message) {}
   rpc subscribe (stream SubscriptionAcks) returns (stream SubscriptionMessage) {}
}